@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@{
    var loginUrl = Configuration["ApiSettings:LoginUrl"];
}

@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="row" style="padding: 10px;">
    <div>
        <a href="@Url.Action("AddSkill", "UserInformation")" class="btn btn-primary btn-sm">
            My Skill Add
        </a>
    </div>

    <div class="col-md-12 mt-3">
        <table id="skillTable" class="table table-bordered">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Skill Name</th>
                    <th>Skill Level</th>
                    <th>Certificate Name</th>
                    <th>Certificate</th>
                    <th>Hands On Experience</th>
                    <th>Experience Time</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <!-- Data will be inserted here -->
            </tbody>
        </table>
    </div>
</div>

<!-- jQuery -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    const baseUrl = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(loginUrl));

    $(document).ready(function () {
        var userCode = localStorage.getItem("userCode");

        if (!userCode) {
            alert("User code not found in local storage.");
            return;
        }

        $.ajax({
            url: `${baseUrl}api/UserInformationSkillMap/GetByUserCode?userCode=${userCode}`,
            type: 'GET',
            success: function (data) {
                debugger;
                var tbody = $("#skillTable tbody");
                tbody.empty();

                if (data && data.length > 0) {
                    $.each(data, function (index, item) {
                        var publicPath = getPublicPath(item.certificatePath);
                        var fileExt = publicPath.split('.').pop().toLowerCase();
                        var certificateDisplay = '';

                        if (fileExt === 'pdf') {
                            certificateDisplay = `<a href="${publicPath}" target="_blank" class="btn btn-sm btn-outline-primary">View PDF</a>`;
                        } else if (['jpg', 'jpeg', 'png', 'gif'].includes(fileExt)) {
                            certificateDisplay = `<a href="${publicPath}" target="_blank" class="btn btn-sm btn-outline-primary">View Image</a>`;
                        } else {
                            certificateDisplay = `---`;
                        }

                        var row = `<tr>
                            <td>${index + 1}</td>
                            <td>${item.skillName}</td>
                            <td>${item.skillLevelName}</td>
                            <td>${item.certificateName ? item.certificateName : '---'}</td>
                            <td>${certificateDisplay}</td>
                            <td>${item.handsOnExperience ? item.handsOnExperience : '---'}</td>
                            <td>${calculateDuration(item.handsOnExperienceFromDate, item.handsOnExperienceToDate)}</td>
                            <td>
                            <a href="/UserInformation/EditUserInformationSkillMap/${item.userInformationSkillMapId}" class="btn btn-warning btn-sm">Edit</a>
                             <a href="/UserInformation/DetailsUserInformationSkillMap/${item.userInformationSkillMapId}" class="btn btn-primary btn-sm">Details</a>
                            <button class="btn btn-danger btn-sm delete-skill" data-id="${item.userInformationSkillMapId}">Delete</button>
                            </td>
                        </tr>`;
                        tbody.append(row);
                    });
                } else {
                    tbody.append("<tr><td colspan='7'>No skill data found.</td></tr>");
                }
            },
            error: function (xhr) {
                console.error("Error:", xhr);
                //alert("Failed to fetch skill data: " + xhr.responseText);
                //alert("Data Not Found !");
            }
        });

        // Removes '/wwwroot' from the file path
        function getPublicPath(filePath) {
            return filePath.replace(/^\/?wwwroot/, '');
        }

        // Calculates experience duration in "X year(s), Y month(s), Z day(s)"
           function calculateDuration(fromDateStr, toDateStr) {
                if (!fromDateStr || !toDateStr) return '';

                const from = new Date(fromDateStr);
                const to = new Date(toDateStr);

                let years = to.getFullYear() - from.getFullYear();
                let months = to.getMonth() - from.getMonth();
                let days = to.getDate() - from.getDate();
                let hours = to.getHours() - from.getHours();

                if (days < 0) {
                    months--;
                    const previousMonth = new Date(to.getFullYear(), to.getMonth(), 0);
                    days += previousMonth.getDate();
                }

                if (months < 0) {
                    years--;
                    months += 12;
                }

                if (hours < 0) {
                    days--;
                    hours += 24;
                    if (days < 0) {
                        months--;
                        const previousMonth = new Date(to.getFullYear(), to.getMonth(), 0);
                        days += previousMonth.getDate();
                        if (months < 0) {
                            years--;
                            months += 12;
                        }
                    }
                }

                const parts = [];
                if (years > 0) parts.push(`${years} year(s)`);
                if (months > 0) parts.push(`${months} month(s)`);
                if (days > 0) parts.push(`${days} day(s)`);
                if (hours > 0) parts.push(`${hours} hour(s)`);

                return parts.length ? parts.join(', ') : '0 hour(s)';
    }

    });

      $('#skillTable').on('click', '.delete-skill', function () {
        const skillId = $(this).data('id');

        if (confirm('Are you sure you want to delete this skill?')) {
            $.ajax({
                url: `${baseUrl}api/UserInformationSkillMap/Delete/${skillId}`, // Adjust endpoint if needed
                type: 'DELETE',
                success: function () {
                    alert('Skill deleted successfully.');
                    location.reload(); // Or re-fetch the table
                },
                error: function (xhr) {
                    console.error(xhr);
                    alert('Failed to delete skill.');
                }
            });
        }
    });




      $('#skillTable').on('click', '.edit-skill', function () {
        const skillId = $(this).data('id');

         $.ajax({
                url: `${baseUrl}api/UserInformationSkillMap/Edit/${skillId}`,
                type: 'GET',
                success: function () {
                    
                },
                error: function (xhr) {
                    //console.error(xhr);
                    //alert('Failed to delete skill.');
                }
            });
    });


</script>

